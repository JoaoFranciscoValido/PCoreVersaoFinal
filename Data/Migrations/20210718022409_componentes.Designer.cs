// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCore.Data;

namespace PCore.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210718022409_componentes")]
    partial class componentes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CategoriasComponentes", b =>
                {
                    b.Property<int>("ListaDeCategoriasIdCategorias")
                        .HasColumnType("int");

                    b.Property<int>("ListaDeComponentesIdComponentes")
                        .HasColumnType("int");

                    b.HasKey("ListaDeCategoriasIdCategorias", "ListaDeComponentesIdComponentes");

                    b.HasIndex("ListaDeComponentesIdComponentes");

                    b.ToTable("CategoriasComponentes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "c",
                            ConcurrencyStamp = "53a7efe3-3ede-44f8-9f34-d307be3023f1",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        },
                        new
                        {
                            Id = "g",
                            ConcurrencyStamp = "780e0728-fc92-4647-970d-165f30e178b1",
                            Name = "Gestor",
                            NormalizedName = "GESTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PCore.Models.Carrinho", b =>
                {
                    b.Property<int>("IdCarrinho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComponentesFK")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadoresFK")
                        .HasColumnType("int");

                    b.HasKey("IdCarrinho");

                    b.HasIndex("ComponentesFK");

                    b.HasIndex("UtilizadoresFK");

                    b.ToTable("Carrinho");
                });

            modelBuilder.Entity("PCore.Models.Categorias", b =>
                {
                    b.Property<int>("IdCategorias")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCategorias");

                    b.ToTable("ListaDeCategorias");
                });

            modelBuilder.Entity("PCore.Models.Componentes", b =>
                {
                    b.Property<int>("IdComponentes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<double>("Pontuacao")
                        .HasColumnType("float");

                    b.Property<int>("Preco")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdComponentes");

                    b.ToTable("Componentes");

                    b.HasData(
                        new
                        {
                            IdComponentes = 1,
                            Descricao = "Processador Intel Core i5-10400F 6-Core 2.9GHz c/ Turbo 4.3GHz 12MB Skt1200",
                            Foto = "cpu.jpg",
                            Nome = "Intel Core I5",
                            Pontuacao = 0.0,
                            Preco = 350,
                            Stock = 20
                        },
                        new
                        {
                            IdComponentes = 2,
                            Descricao = "Processador Intel Core i7-10700K 8-Core 3.8GHz c/ Turbo 5.1GHz 16MB Skt1200",
                            Foto = "cpu1.jpg",
                            Nome = "Intel Core I7",
                            Pontuacao = 0.0,
                            Preco = 400,
                            Stock = 5
                        },
                        new
                        {
                            IdComponentes = 3,
                            Descricao = "Ventoinha 240mm  1200RPM ML120 PRO LED Branco 4 Pinos PWM",
                            Foto = "fan.jpg",
                            Nome = "Ventoinha 240",
                            Pontuacao = 0.0,
                            Preco = 120,
                            Stock = 50
                        },
                        new
                        {
                            IdComponentes = 4,
                            Descricao = "Ventoinha 120mm  2400RPM ML120 PRO LED Branco 4 Pinos PWM",
                            Foto = "fan2.jpg",
                            Nome = "Ventoinha 120",
                            Pontuacao = 0.0,
                            Preco = 100,
                            Stock = 25
                        },
                        new
                        {
                            IdComponentes = 5,
                            Descricao = "Placa Gráfica Gaming GeForce GTX 1650 OC 4GB",
                            Foto = "gpu.jpg",
                            Nome = "NVIDIA GTX1650",
                            Pontuacao = 0.0,
                            Preco = 700,
                            Stock = 2
                        },
                        new
                        {
                            IdComponentes = 6,
                            Descricao = "Placa Gráfica PNY NVIDIA Quadro RTX 5000",
                            Foto = "gpu1.jpg",
                            Nome = "NVIDIA Quadro",
                            Pontuacao = 0.0,
                            Preco = 400,
                            Stock = 5
                        },
                        new
                        {
                            IdComponentes = 7,
                            Descricao = "HDD Western Digital 1TB Caviar Blue 7200rpm 64MB SATA III 3.5",
                            Foto = "hdd.jpg",
                            Nome = "1TB HDD",
                            Pontuacao = 0.0,
                            Preco = 45,
                            Stock = 1
                        },
                        new
                        {
                            IdComponentes = 8,
                            Descricao = "Disco Interno SSD A400 - 512GB",
                            Foto = "hdd1.jpg",
                            Nome = "512GB HDD",
                            Pontuacao = 0.0,
                            Preco = 20,
                            Stock = 60
                        },
                        new
                        {
                            IdComponentes = 9,
                            Descricao = "Disco Interno SSD 860 EVO - 2TB",
                            Foto = "ssd.jpg",
                            Nome = "2TB SSD",
                            Pontuacao = 0.0,
                            Preco = 120,
                            Stock = 15
                        },
                        new
                        {
                            IdComponentes = 10,
                            Descricao = "Disco Interno SSD  A400 - 512GB",
                            Foto = "ssd1.jpg",
                            Nome = "512GB SSD",
                            Pontuacao = 0.0,
                            Preco = 450,
                            Stock = 70
                        },
                        new
                        {
                            IdComponentes = 11,
                            Descricao = "MotherBoard Gaming",
                            Foto = "mother.jpg",
                            Nome = "MotherBoard",
                            Pontuacao = 0.0,
                            Preco = 80,
                            Stock = 0
                        },
                        new
                        {
                            IdComponentes = 12,
                            Descricao = "Caixa Gamer Storm",
                            Foto = "box.jpg",
                            Nome = "Caixa Gaming",
                            Pontuacao = 0.0,
                            Preco = 80,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("PCore.Models.Reviews", b =>
                {
                    b.Property<int>("IdReview")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComponentesFK")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<int>("Pontuacao")
                        .HasColumnType("int");

                    b.Property<int>("UtilizadoresFK")
                        .HasColumnType("int");

                    b.Property<bool>("Visibilidade")
                        .HasColumnType("bit");

                    b.HasKey("IdReview");

                    b.HasIndex("ComponentesFK");

                    b.HasIndex("UtilizadoresFK");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("PCore.Models.Utilizadores", b =>
                {
                    b.Property<int>("IdUtilizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("ControlarReview")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserNameId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdUtilizador");

                    b.ToTable("Utilizadores");
                });

            modelBuilder.Entity("CategoriasComponentes", b =>
                {
                    b.HasOne("PCore.Models.Categorias", null)
                        .WithMany()
                        .HasForeignKey("ListaDeCategoriasIdCategorias")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCore.Models.Componentes", null)
                        .WithMany()
                        .HasForeignKey("ListaDeComponentesIdComponentes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCore.Models.Carrinho", b =>
                {
                    b.HasOne("PCore.Models.Componentes", "Componente")
                        .WithMany("ListaDeCarrinho")
                        .HasForeignKey("ComponentesFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCore.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaDeCarrinho")
                        .HasForeignKey("UtilizadoresFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Componente");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("PCore.Models.Reviews", b =>
                {
                    b.HasOne("PCore.Models.Componentes", "Componente")
                        .WithMany("ListaDeReviews")
                        .HasForeignKey("ComponentesFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCore.Models.Utilizadores", "Utilizador")
                        .WithMany("ListaDeReviews")
                        .HasForeignKey("UtilizadoresFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Componente");

                    b.Navigation("Utilizador");
                });

            modelBuilder.Entity("PCore.Models.Componentes", b =>
                {
                    b.Navigation("ListaDeCarrinho");

                    b.Navigation("ListaDeReviews");
                });

            modelBuilder.Entity("PCore.Models.Utilizadores", b =>
                {
                    b.Navigation("ListaDeCarrinho");

                    b.Navigation("ListaDeReviews");
                });
#pragma warning restore 612, 618
        }
    }
}
